
在条件判断中,可用操作运算符和C/C++以及C#等基本一致: <, <=, >, >=, ==, !=


if 分支:

    if condition_1:
        statement_block_1
    elif condition_2:
        statement_block_2
    else:
        statement_block_3

match 声明:
    类似于C/C++中的switch

    match aa:
        case x:
            pass
        case y:
            pass
        case z:
            pass
        case _:
            pass
    
    而 case _ 则与switch中的default一致;

    
while 循环:

    while <expr>:
        <statement(s)>


    while <expr>:
        <statement(s)>
    else:
        <additional_statement(s)>

for 循环:

    for <variable> in <sequence>:
        <statements>
    else:
        <statements>

备注: 在python中,一样有break和continue,作用与C/C++等一致


备注:
    在C/C++中,for一般用于明确循环次数的循环,而while用于非明确循环次数的循环(例如某些判断条件满足时才退出);
    而看python,for循环的语法看来,多用于对数据内容的遍历迭代,而明确循环次数的职能由while来实现

pass 语句:
    pass 是空语句,不做任何事情,一般用于做占位用;


异常:

    try:
        # 可能产生异常的代码
    except AssertionError as error:
        # 发生异常时执行
    else:
        # 没有触发异常时执行
    finally:
        # 无论是否触发异常都会到这里

抛出异常:
    raise [Exception [, args [, traceback]]]

    如:
    x = 10
    if x > 5:
        raise Exception('x 不能大于 5。x 的值为: {}'.format(x))

    而在except中,如果不想处理它,可以再次调用raise向上级抛出异常

    raise和C#中的throw差不多

with 关键字:
    with 语句用于异常处理,封装了 try…finally 编码范式,使代码更清晰

    普通写法:
    file = open('./test_runoob.txt', 'w')
    try:
        file.write('hello world')
    finally:
        file.close()

    with写法:
    with open('./test_runoob.txt', 'w') as file:
        file.write('hello world !')

    with写法会自动调用file的close
    备注,类似于C#中的using写法?:
    using (File file = new File('./test_runoob.txt', 'w'))
    {
        file.write('hello world !')
    } 

